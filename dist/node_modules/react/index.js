(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.react = factory());
})(this, (function () { 'use strict';

	//判断是否支持symbol
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	/**
	 * ReactElement type的实现
	 */
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	//ReactElement
	/**
	 * ReactElement构造函数
	 * @param type
	 * @param key
	 * @param ref
	 * @param props
	 * @returns
	 */
	const ReactElement = function (type, key, ref, props) {
	    //key, ref, props 对应着组件
	    const element = {
	        //element的类型是react.element
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __mark: 'mini'
	    };
	    return element;
	};
	/**
	 * 开发环境直接jsxDEV
	 */
	// export const jsxDEV = jsx
	const jsxDEV = (type, config) => {
	    // 单独处理key props ref
	    let key = null; //默认是null
	    const props = {};
	    let ref = null;
	    //? 处理config
	    for (const prop in config) {
	        const val = config[prop];
	        //key
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = '' + val; //转为字符串
	            }
	            continue;
	        }
	        //ref
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        //* 对于其他的prop 判断是否是config的prop而不是原型上的prop
	        //如果是原型上的就不赋值
	        if ({}.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    return ReactElement(type, key, ref, props);
	};

	var index = {
	    version: '0.0.0',
	    createElement: jsxDEV
	};

	return index;

}));
