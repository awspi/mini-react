(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react')) :
	typeof define === 'function' && define.amd ? define(['react'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.ReactDOM = factory(global.React));
})(this, (function (React) { 'use strict';

	function _interopNamespaceDefault(e) {
		var n = Object.create(null);
		if (e) {
			Object.keys(e).forEach(function (k) {
				if (k !== 'default') {
					var d = Object.getOwnPropertyDescriptor(e, k);
					Object.defineProperty(n, k, d.get ? d : {
						enumerable: true,
						get: function () { return e[k]; }
					});
				}
			});
		}
		n.default = e;
		return Object.freeze(n);
	}

	var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

	//没有标记
	const NoFlags = 0b0000000;
	//插入
	const Placement = 0b0000001;
	//更新属性
	const Update = 0b0000010;
	//删除子节点
	const ChildDeletion = 0b0000100;
	//Mutation阶段 需要执行的操作
	const MutationMask = Placement | Update | ChildDeletion;

	const FunctionComponent = 0;
	const HostRoot = 3;
	const HostComponent = 5;
	// <div>123</div>
	const HostText = 6;

	class FiberNode {
	    // ?实例
	    type;
	    tag;
	    key;
	    stateNode;
	    ref;
	    // ?树状结构
	    return;
	    sibling;
	    child;
	    index;
	    // ?工作单元
	    pendingProps;
	    memoizedProps;
	    memoizedState;
	    alternate;
	    updateQueue;
	    // ?副作用
	    flags;
	    subtreeFlags;
	    constructor(tag, pendingProps, key) {
	        // ?实例
	        this.tag = tag;
	        this.key = key;
	        // 比如HostComponent是一个<div> stateNode就是div的DOM
	        this.stateNode = null;
	        // 例如FunctionComponent 就是function本身
	        this.type = null;
	        this.ref = null;
	        // ?树状结构
	        // 指向父fiberNode 作为一个工作单元 下一个就是他的父节点
	        this.return = null;
	        // 兄弟节点
	        this.sibling = null;
	        // 子节点
	        this.child = null;
	        // 节点的index 例如 <ul><li index=0/><li index=1/></li>
	        this.index = 0;
	        // ?工作单元
	        // 开始时的props
	        this.pendingProps = pendingProps;
	        // 更新后的props
	        this.memoizedProps = null;
	        this.memoizedState = null;
	        // 用于当前fiberNode的切换 指向current or workInProgress
	        this.alternate = null;
	        // 指向updateQueue
	        this.updateQueue = null;
	        // ?副作用
	        this.flags = NoFlags;
	        // 子树的flags
	        this.subtreeFlags = NoFlags;
	    }
	}
	//根FiberNode节点
	class FiberRootNode {
	    //宿主环境挂载的节点 ReactDOM.createRoot(rootElement)的 rootElement
	    container;
	    //指向HostRootFiber
	    current;
	    // 更新完成后的hostRootFiber
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    // 双缓存机制 -> 传入fiberNode应该返回alternate
	    // WorkInProgress 缩写为wip
	    let wip = current.alternate;
	    //对于首屏渲染 wip 为null
	    if (wip === null) {
	        // mount
	        // 如果不存在就新建一个=current
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        // 清除副作用
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memoizedProps = current.memoizedProps;
	    wip.memoizedState = current.memoizedState;
	    return wip;
	};
	function createFiberFromELement(element) {
	    const { props, key, type } = element;
	    //默认为FunctionComponent
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // <div/> type:'div'
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('未定义的type类型', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	}

	// 创建update实例的方法
	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	// 创建updateQueue实例的方法
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	// 往updateQueue加入update
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	//
	/**
	 * updateQueue消费update
	 * @param baseState 基础的状态
	 * @param pendingUpdate pendingUpdate
	 * @returns 最终的状态 memoizedState
	 */
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memoizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        // baseState 1 update 2 ->memoizedState 2
	        // baseState 1 update (x)=>4x ->memoizedState 4
	        const action = pendingUpdate.action;
	        if (action instanceof Function) {
	            result.memoizedState = action(baseState);
	        }
	        else {
	            result.memoizedState = action;
	        }
	    }
	    return result;
	};

	//判断是否支持symbol
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	/**
	 * ReactElement type的实现
	 */
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('react.element')
	    : 0xeac7;

	// 对比子节点 current fiberNode 和reactElement 生成对应wip fiberNode
	function childReconciler(shouldTrackEffect) {
	    // false 不追踪副作用
	    // 使用闭包 返回不同的reconcileChildFibers的实现
	    function reconcileSingleElement(returnFiber, currentFiber, element) {
	        // 根据 ReactElement 创建fiberNode
	        const fiber = createFiberFromELement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    function reconcileSingleTextNode(returnFiber, currentFiber, content) {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    }
	    // 插入单一节点
	    function placeSingleChild(fiber) {
	        if (shouldTrackEffect && fiber.alternate === null) {
	            // alternate===null->currentFiber===null 首屏渲染的情况
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    }
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        // 判断当前fiber类型
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('未实现的reconcile类型');
	                    }
	                    break;
	            }
	        }
	        //TODO 多节点的情况 ul>li*3
	        // HostText
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        // return fiberNode
	        return null;
	    };
	}
	const reconcileChildFibers = childReconciler(true);
	const mountChildFibers = childReconciler(false);

	//数据中转层 (为了解耦)
	const internals = React__namespace.__SECRET_INTERNALS;

	// 当前正在render的fiberNode
	let currentlyRenderingFiber = null;
	// 当前正在处理的Hook的指针
	let workInProgressHook = null;
	const { currentDispatcher } = internals;
	//函数式组件 通过执行来获取children
	function renderWithHooks(wip) {
	    // 赋值操作
	    currentlyRenderingFiber = wip;
	    //重置
	    wip.memoizedState = null;
	    const current = wip.alternate;
	    if (current !== null) ;
	    else {
	        // mount
	        currentDispatcher.current = HooksDispatherOnMount;
	    }
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    //* 函数式组件,通过执行来获取children
	    const children = Component(props);
	    //重置操作
	    currentlyRenderingFiber = null;
	    return children;
	}
	const HooksDispatherOnMount = {
	    useState: mountState
	};
	function mountState(initialState) {
	    //找到当前useState对应的hook数据
	    const hook = mountWorkInProgressHook();
	    let memoizedState = undefined;
	    if (initialState instanceof Function) {
	        memoizedState = initialState();
	    }
	    else {
	        memoizedState = initialState;
	    }
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    hook.memoizedState = memoizedState;
	    // @ts-ignore
	    const dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
	    //currentlyRenderingFiber、queue已经预置到dispatch
	    // 开发者直接传action即可
	    queue.dispatch = dispatch;
	    return [memoizedState, dispatch];
	}
	function dispatchSetState(fiber, updateQueue, action) {
	    //与首屏渲染流程类似
	    // 1.创建update
	    const update = createUpdate(action);
	    // 2.enqueueUpdate
	    enqueueUpdate(updateQueue, update);
	    // 2.scheduleUpdateOnFiber
	    scheduleUpdateOnFiber(fiber);
	}
	function mountWorkInProgressHook() {
	    //mount时 先创建hook
	    const hook = {
	        memoizedState: null,
	        updateQueue: null,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        // mount时 且是第一个hook
	        if (currentlyRenderingFiber === null) {
	            // 函数式组件一定会有currentlyRenderingFiber 如果没有 就是不在函数式组件中使用
	            throw new Error('请在函数组件内使用Hook');
	        }
	        else {
	            //mount时的第一个hook
	            workInProgressHook = hook;
	            currentlyRenderingFiber.memoizedState = workInProgressHook;
	        }
	    }
	    else {
	        // mount时 后续的hook
	        workInProgressHook.next = hook;
	        //指向自己(下一个)
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	}

	// DFS中的 递
	//* ReactElement与对应的fiberNode比较 返回子fiberNode
	const beginWork = (wip) => {
	    // 1.比较
	    // 2.返回fiberNode
	    switch (wip.tag) {
	        case HostRoot:
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            // 递 到叶子结点HostText
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip);
	        default:
	            {
	                console.warn('beginWork尚未实现的类型', wip.tag);
	            }
	            break;
	    }
	    return null;
	};
	function updateFunctionComponent(wip) {
	    const nextChildren = renderWithHooks(wip);
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function updateHostRoot(wip) {
	    const baseState = wip.memoizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memoizedState } = processUpdateQueue(baseState, pending);
	    wip.memoizedState = memoizedState;
	    const nextChildren = wip.memoizedState;
	    reconcileChildren(wip, nextChildren);
	    //  返回子fiberNode
	    return wip.child;
	}
	function updateHostComponent(wip) {
	    //不能触发更新 只创建子fiberNode
	    // <div><span/></div> -> div.child
	    const nextProps = wip.pendingProps;
	    const nextChildren = nextProps.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	}
	function reconcileChildren(wip, children) {
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	}

	/**
	 * HostConfig 宿主环境(浏览器)实现的方法
	 */
	const createInstance = (type, props) => {
	    const element = document.createElement(type);
	    //TODO 处理props
	    return element;
	};
	const appendInitialChid = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChid;

	let nextEffect = null;
	const commitMutationEffects = (finishedWork) => {
	    nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        //向下遍历
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            // 子节点存在Mutation需要执行的操作
	            nextEffect = child;
	        }
	        else {
	            // 向上遍历DFS
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    // 同级
	                    nextEffect = sibling;
	                    break up;
	                }
	                // 向上
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    //finishedWork 是确定了存在flags的节点
	    const flags = finishedWork.flags;
	    //flags Placement
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        //从flags中移除
	        finishedWork.flags &= ~Placement;
	    }
	    //TODO flags Update
	    //TODO flags ChildDeletion
	};
	const commitPlacement = (finishedWork) => {
	    //需要知道:
	    //parent DOM 要插入到谁?
	    //finishedWork ~~DOM //fiber找到对应的DOM节点
	    {
	        console.warn('执行Placement操作', finishedWork);
	    }
	    // parent DOM
	    const hostParent = getHostParent(finishedWork);
	    // finishedWork ~~DOM
	    if (hostParent !== null) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	function getHostParent(fiber) {
	    //向上遍历
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        //hostComponent / hostRoot
	        if (parentTag === HostComponent) {
	            // HostComponent的fiberNode对应的宿主环境节点就是保存在stateNode
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            // HostRoot的fiberNode对应的宿主环境节点保存在 stateNode.containter
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('未找到hostParent');
	    }
	    return null;
	}
	function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
	    // DFS 出口
	    //fiber-->找到host类型的fiber 然后插入到host parent
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    // 向下遍历
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	}

	// DFS中的 归
	//* ReactElement与对应的fiberNode比较 返回子fiberNode
	const completeWork = (wip) => {
	    // 1.比较	2.返回
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 首屏渲染
	                // 1.构建DOM
	                const instance = createInstance(wip.type);
	                // 2.将Dom插入到DOM树
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            // 首屏渲染
	            // 1.构建DOM
	            const instance = createTextInstance(newProps.content);
	            wip.stateNode = instance;
	            bubbleProperties(wip);
	            return null;
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('未处理的completeWork的tag', wip);
	            }
	            break;
	    }
	};
	function appendAllChildren(parent, wip) {
	    let node = wip.child;
	    while (node !== null) {
	        if (node?.tag === HostComponent || node?.tag === HostText) {
	            // 如果找到了
	            appendInitialChid(parent, node.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip) {
	            return;
	        }
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                //回到原点
	                return;
	            }
	            node = node?.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	}
	function bubbleProperties(wip) {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    if (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	}

	// 全局的指针,指向当前工作的fiberNode
	let workInProgress = null;
	//? 让workInProgress指向当前遍历的第一个节点
	function prepareFreshStack(root) {
	    // 为 hostRootFiber 创建wip
	    workInProgress = createWorkInProgress(root.current, {});
	}
	// 在fiber中调度update 链接Container和renderRoot
	function scheduleUpdateOnFiber(fiber) {
	    //TODO 调度功能
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	}
	//从当前fiberNode找到到根节点
	function markUpdateFromFiberToRoot(fiber) {
	    let node = fiber;
	    let parent = node.return;
	    // 如果return 不为null 说明不是hostRootFiber(只有stateNode 没有return)
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    // 跳出了循环 说明到了	hostRootFiber
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	}
	function renderRoot(root) {
	    //初始化
	    prepareFreshStack(root);
	    //递归的流程
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (e) {
	            {
	                console.warn('workLoop发生错误');
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    root.finishedWork = finishedWork;
	    // wip fiberNode树 树中的flags
	    //todo
	    commitRoot(root);
	}
	function commitRoot(root) {
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null) {
	        return;
	    }
	    {
	        console.warn('commit阶段 开始', finishedWork);
	    }
	    //重置
	    root.finishedWork = null;
	    //判断是否存在三个子阶段(beforeMutation、mutation、layout)需要去执行的操作
	    //root flags / root subtreeFlags 是否包含MutationMask的flag
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        //beforeMutation
	        //mutation
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        //layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	}
	function workLoop() {
	    //只要workInProgress!==null就一直执行
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	}
	function performUnitOfWork(fiber) {
	    //? 有子节点，遍历子节点 -> 执行beginWork
	    const next = beginWork(fiber);
	    fiber.memoizedProps = fiber.pendingProps;
	    // next可能是 子fiber or null
	    if (next === null) {
	        // 递归到最深了
	        //? 如果没有子节点，遍历兄弟节点 开始归->completeUnitOfWork
	        completeUnitOfWork(fiber);
	    }
	    else {
	        //继续向下遍历
	        workInProgress = next;
	    }
	}
	function completeUnitOfWork(fiber) {
	    let node = fiber;
	    do {
	        completeWork(node); //DFS中的 归
	        const sibling = node.sibling;
	        // 如果存在兄弟节点 就再遍历兄弟节点
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        //如果不存在兄弟节点 就往上继续 归
	        //* node指到父级节点
	        node = node.return;
	        workInProgress = null;
	    } while (node !== null);
	}

	// ReactDOM.createRoot() 内部执行
	/**
	 * 创建整个项目的根节点 fiberRootNode
	 * 将 fiberRootNode 与 hostRootFiber 连接起来
	 * @param container
	 * @returns
	 */
	function createContainer(container) {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	}
	// .render() 内部执行
	/**
	 * 创建update 并将 update 添加到updateQueue中
	 * @param element
	 * @param root
	 * @returns
	 */
	function updateContainer(element, root) {
	    const hostRootFiber = root.current;
	    // 首屏渲染更新
	    const update = createUpdate(element);
	    // 更新插入到hostRootFiber的updateQueue
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    // 在fiber中调度update
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	}

	// ReactDOM.createRoot(root).render(<APP/>)
	function createRoot(container) {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            return updateContainer(element, root);
	        }
	    };
	}

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	return ReactDOM;

}));
